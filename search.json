[
  {
    "objectID": "redesign.html",
    "href": "redesign.html",
    "title": "Redesign Project",
    "section": "",
    "text": "Welcome to my redesign project, where I present two original visualizations and two redesigns for each. Navigate easily using the buttons below."
  },
  {
    "objectID": "redesign.html#navigation",
    "href": "redesign.html#navigation",
    "title": "Redesign Project",
    "section": "Navigation",
    "text": "Navigation\n\nOriginal Visualization 1\n\n\nOriginal Visualization 2\n\n\nConcluding Remarks"
  },
  {
    "objectID": "redesign.html#original-visualization-1",
    "href": "redesign.html#original-visualization-1",
    "title": "Redesign Project",
    "section": "Original Visualization 1",
    "text": "Original Visualization 1\n\n\n\nOriginal Graph 1\n\n\nSource: Original Graph 1 Source\n\n\nAnalysis of Original Visualization 1\n\n\nThe original graph aimed to show XYZ, but several visual flaws were noted:\n\n\n\nIssue 1: The color scheme is ineffective in differentiating the data categories.\n\n\nIssue 2: The use of 3D bars adds unnecessary complexity, making it hard to compare values.\n\n\n\n\nRedesign 1 of Original Visualization 1"
  },
  {
    "objectID": "redesign.html#original-visualization-2",
    "href": "redesign.html#original-visualization-2",
    "title": "Redesign Project",
    "section": "Original Visualization 2",
    "text": "Original Visualization 2\n\n\n\nOriginal Graph 2\n\n\nSource: Original Graph 2 Source\n\n\nAnalysis of Original Visualization 2\n\n\nThe original graph attempted to visualize ABC but had the following issues:\n\n\n\nIssue 1: Lack of labels makes it difficult to interpret what each axis represents.\n\n\nIssue 2: Data points are overplotted, obscuring key trends.\n\n\n\n\nRedesign 1 of Original Visualization 2\n\n\nDiscussion: This redesign includes clearly labeled axes, and different point shapes were used to reduce overplotting and improve readability.\n\n\nRedesign 2 of Original Visualization 2\n\n&lt;p&gt;&lt;strong&gt;Discussion&lt;/strong&gt;: In this version, we used a line plot instead of scatter points to better represent the trend over time.&lt;/p&gt;\n&lt;hr /&gt;\n&lt;/section&gt;\n&lt;/section&gt;\n&lt;section id=\"concluding-remarks\" class=\"level2\"&gt;\n&lt;h2&gt;Concluding Remarks&lt;/h2&gt;\n&lt;div class=\"card\"&gt;\n&lt;p&gt;\nThrough these redesigns, I’ve aimed to improve both the interpretability and visual clarity of the original visualizations. Specifically:\n&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;\n&lt;strong&gt;Original Visualization 1&lt;/strong&gt;: The use of better color schemes and simplified design made it easier to understand the categories and their relationships.\n&lt;/li&gt;\n&lt;li&gt;\n&lt;strong&gt;Original Visualization 2&lt;/strong&gt;: Adding labels and changing the plot type helped convey the key message without overwhelming the viewer.\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;\nFurther steps may include incorporating additional data points for more in-depth analysis or experimenting with interactive visualizations.\n&lt;/p&gt;\n&lt;/div&gt;\n&lt;hr /&gt;\n&lt;/section&gt;\n&lt;section id=\"references\" class=\"level2\"&gt;\n&lt;h2&gt;References&lt;/h2&gt;\n&lt;ul&gt;\n&lt;li&gt;Original Visualization 1 Source: Author Name, Year, &lt;a href=\"#\"&gt;Link to Source&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Original Visualization 2 Source: Author Name, Year, &lt;a href=\"#\"&gt;Link to Source&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Tools: R, ggplot2, dplyr&lt;/li&gt;\n&lt;/ul&gt;\n&lt;div id=\"quarto-navigation-envelope\" class=\"hidden\"&gt;\n&lt;p&gt;&lt;span class=\"hidden quarto-markdown-envelope-contents\" data-render-id=\"quarto-int-sidebar-title\"&gt;My STAT 515 Redesign Project&lt;/span&gt; &lt;span class=\"hidden quarto-markdown-envelope-contents\" data-render-id=\"quarto-int-navbar-title\"&gt;My STAT 515 Redesign Project&lt;/span&gt; &lt;span class=\"hidden quarto-markdown-envelope-contents\" data-render-id=\"quarto-int-navbar:Home\"&gt;Home&lt;/span&gt; &lt;span class=\"hidden quarto-markdown-envelope-contents\" data-render-id=\"quarto-int-navbar:/index.html\"&gt;/index.html&lt;/span&gt; &lt;span class=\"hidden quarto-markdown-envelope-contents\" data-render-id=\"quarto-int-navbar:Redesign Project\"&gt;Redesign Project&lt;/span&gt; &lt;span class=\"hidden quarto-markdown-envelope-contents\" data-render-id=\"quarto-int-navbar:/redesign.html\"&gt;/redesign.html&lt;/span&gt; &lt;span class=\"hidden quarto-markdown-envelope-contents\" data-render-id=\"quarto-int-navbar:Code and References\"&gt;Code and References&lt;/span&gt; &lt;span class=\"hidden quarto-markdown-envelope-contents\" data-render-id=\"quarto-int-navbar:/code.html\"&gt;/code.html&lt;/span&gt; &lt;span class=\"hidden quarto-markdown-envelope-contents\" data-render-id=\"quarto-int-navbar:About\"&gt;About&lt;/span&gt; &lt;span class=\"hidden quarto-markdown-envelope-contents\" data-render-id=\"quarto-int-navbar:/about.html\"&gt;/about.html&lt;/span&gt;&lt;/p&gt;\n&lt;/div&gt;\n&lt;div id=\"quarto-meta-markdown\" class=\"hidden\"&gt;\n&lt;p&gt;&lt;span class=\"hidden quarto-markdown-envelope-contents\" data-render-id=\"quarto-metatitle\"&gt;Redesign Project – My STAT 515 Redesign Project&lt;/span&gt; &lt;span class=\"hidden quarto-markdown-envelope-contents\" data-render-id=\"quarto-twittercardtitle\"&gt;Redesign Project – My STAT 515 Redesign Project&lt;/span&gt; &lt;span class=\"hidden quarto-markdown-envelope-contents\" data-render-id=\"quarto-ogcardtitle\"&gt;Redesign Project – My STAT 515 Redesign Project&lt;/span&gt; &lt;span class=\"hidden quarto-markdown-envelope-contents\" data-render-id=\"quarto-metasitename\"&gt;My STAT 515 Redesign Project&lt;/span&gt; &lt;span class=\"hidden quarto-markdown-envelope-contents\" data-render-id=\"quarto-twittercarddesc\"&gt;&lt;/span&gt; &lt;span class=\"hidden quarto-markdown-envelope-contents\" data-render-id=\"quarto-ogcardddesc\"&gt;&lt;/span&gt;&lt;/p&gt;\n&lt;/div&gt;\n&lt;/section&gt;\n&lt;/section&gt;\n\n&lt;/main&gt; &lt;!-- /main --&gt;\n&lt;script id = \"quarto-html-after-body\" type=\"application/javascript\"&gt;\nwindow.document.addEventListener(\"DOMContentLoaded\", function (event) {\n  const toggleBodyColorMode = (bsSheetEl) =&gt; {\n    const mode = bsSheetEl.getAttribute(\"data-mode\");\n    const bodyEl = window.document.querySelector(\"body\");\n    if (mode === \"dark\") {\n      bodyEl.classList.add(\"quarto-dark\");\n      bodyEl.classList.remove(\"quarto-light\");\n    } else {\n      bodyEl.classList.add(\"quarto-light\");\n      bodyEl.classList.remove(\"quarto-dark\");\n    }\n  }\n  const toggleBodyColorPrimary = () =&gt; {\n    const bsSheetEl = window.document.querySelector(\"link#quarto-bootstrap\");\n    if (bsSheetEl) {\n      toggleBodyColorMode(bsSheetEl);\n    }\n  }\n  toggleBodyColorPrimary();  \n  const disableStylesheet = (stylesheets) =&gt; {\n    for (let i=0; i &lt; stylesheets.length; i++) {\n      const stylesheet = stylesheets[i];\n      stylesheet.rel = 'prefetch';\n    }\n  }\n  const enableStylesheet = (stylesheets) =&gt; {\n    for (let i=0; i &lt; stylesheets.length; i++) {\n      const stylesheet = stylesheets[i];\n      stylesheet.rel = 'stylesheet';\n    }\n  }\n  const manageTransitions = (selector, allowTransitions) =&gt; {\n    const els = window.document.querySelectorAll(selector);\n    for (let i=0; i &lt; els.length; i++) {\n      const el = els[i];\n      if (allowTransitions) {\n        el.classList.remove('notransition');\n      } else {\n        el.classList.add('notransition');\n      }\n    }\n  }\n  const toggleGiscusIfUsed = (isAlternate, darkModeDefault) =&gt; {\n    const baseTheme = document.querySelector('#giscus-base-theme')?.value ?? 'light';\n    const alternateTheme = document.querySelector('#giscus-alt-theme')?.value ?? 'dark';\n    let newTheme = '';\n    if(darkModeDefault) {\n      newTheme = isAlternate ? baseTheme : alternateTheme;\n    } else {\n      newTheme = isAlternate ? alternateTheme : baseTheme;\n    }\n    const changeGiscusTheme = () =&gt; {\n      // From: https://github.com/giscus/giscus/issues/336\n      const sendMessage = (message) =&gt; {\n        const iframe = document.querySelector('iframe.giscus-frame');\n        if (!iframe) return;\n        iframe.contentWindow.postMessage({ giscus: message }, 'https://giscus.app');\n      }\n      sendMessage({\n        setConfig: {\n          theme: newTheme\n        }\n      });\n    }\n    const isGiscussLoaded = window.document.querySelector('iframe.giscus-frame') !== null;\n    if (isGiscussLoaded) {\n      changeGiscusTheme();\n    }\n  }\n  const toggleColorMode = (alternate) =&gt; {\n    // Switch the stylesheets\n    const alternateStylesheets = window.document.querySelectorAll('link.quarto-color-scheme.quarto-color-alternate');\n    manageTransitions('#quarto-margin-sidebar .nav-link', false);\n    if (alternate) {\n      enableStylesheet(alternateStylesheets);\n      for (const sheetNode of alternateStylesheets) {\n        if (sheetNode.id === \"quarto-bootstrap\") {\n          toggleBodyColorMode(sheetNode);\n        }\n      }\n    } else {\n      disableStylesheet(alternateStylesheets);\n      toggleBodyColorPrimary();\n    }\n    manageTransitions('#quarto-margin-sidebar .nav-link', true);\n    // Switch the toggles\n    const toggles = window.document.querySelectorAll('.quarto-color-scheme-toggle');\n    for (let i=0; i &lt; toggles.length; i++) {\n      const toggle = toggles[i];\n      if (toggle) {\n        if (alternate) {\n          toggle.classList.add(\"alternate\");     \n        } else {\n          toggle.classList.remove(\"alternate\");\n        }\n      }\n    }\n    // Hack to workaround the fact that safari doesn't\n    // properly recolor the scrollbar when toggling (#1455)\n    if (navigator.userAgent.indexOf('Safari') &gt; 0 && navigator.userAgent.indexOf('Chrome') == -1) {\n      manageTransitions(\"body\", false);\n      window.scrollTo(0, 1);\n      setTimeout(() =&gt; {\n        window.scrollTo(0, 0);\n        manageTransitions(\"body\", true);\n      }, 40);  \n    }\n  }\n  const isFileUrl = () =&gt; { \n    return window.location.protocol === 'file:';\n  }\n  const hasAlternateSentinel = () =&gt; {  \n    let styleSentinel = getColorSchemeSentinel();\n    if (styleSentinel !== null) {\n      return styleSentinel === \"alternate\";\n    } else {\n      return false;\n    }\n  }\n  const setStyleSentinel = (alternate) =&gt; {\n    const value = alternate ? \"alternate\" : \"default\";\n    if (!isFileUrl()) {\n      window.localStorage.setItem(\"quarto-color-scheme\", value);\n    } else {\n      localAlternateSentinel = value;\n    }\n  }\n  const getColorSchemeSentinel = () =&gt; {\n    if (!isFileUrl()) {\n      const storageValue = window.localStorage.getItem(\"quarto-color-scheme\");\n      return storageValue != null ? storageValue : localAlternateSentinel;\n    } else {\n      return localAlternateSentinel;\n    }\n  }\n  const darkModeDefault = false;\n  let localAlternateSentinel = darkModeDefault ? 'alternate' : 'default';\n  // Dark / light mode switch\n  window.quartoToggleColorScheme = () =&gt; {\n    // Read the current dark / light value \n    let toAlternate = !hasAlternateSentinel();\n    toggleColorMode(toAlternate);\n    setStyleSentinel(toAlternate);\n    toggleGiscusIfUsed(toAlternate, darkModeDefault);\n  };\n  // Ensure there is a toggle, if there isn't float one in the top right\n  if (window.document.querySelector('.quarto-color-scheme-toggle') === null) {\n    const a = window.document.createElement('a');\n    a.classList.add('top-right');\n    a.classList.add('quarto-color-scheme-toggle');\n    a.href = \"\";\n    a.onclick = function() { try { window.quartoToggleColorScheme(); } catch {} return false; };\n    const i = window.document.createElement(\"i\");\n    i.classList.add('bi');\n    a.appendChild(i);\n    window.document.body.appendChild(a);\n  }\n  // Switch to dark mode if need be\n  if (hasAlternateSentinel()) {\n    toggleColorMode(true);\n  } else {\n    toggleColorMode(false);\n  }\n  const icon = \"\";\n  const anchorJS = new window.AnchorJS();\n  anchorJS.options = {\n    placement: 'right',\n    icon: icon\n  };\n  anchorJS.add('.anchored');\n  const isCodeAnnotation = (el) =&gt; {\n    for (const clz of el.classList) {\n      if (clz.startsWith('code-annotation-')) {                     \n        return true;\n      }\n    }\n    return false;\n  }\n  const onCopySuccess = function(e) {\n    // button target\n    const button = e.trigger;\n    // don't keep focus\n    button.blur();\n    // flash \"checked\"\n    button.classList.add('code-copy-button-checked');\n    var currentTitle = button.getAttribute(\"title\");\n    button.setAttribute(\"title\", \"Copied!\");\n    let tooltip;\n    if (window.bootstrap) {\n      button.setAttribute(\"data-bs-toggle\", \"tooltip\");\n      button.setAttribute(\"data-bs-placement\", \"left\");\n      button.setAttribute(\"data-bs-title\", \"Copied!\");\n      tooltip = new bootstrap.Tooltip(button, \n        { trigger: \"manual\", \n          customClass: \"code-copy-button-tooltip\",\n          offset: [0, -8]});\n      tooltip.show();    \n    }\n    setTimeout(function() {\n      if (tooltip) {\n        tooltip.hide();\n        button.removeAttribute(\"data-bs-title\");\n        button.removeAttribute(\"data-bs-toggle\");\n        button.removeAttribute(\"data-bs-placement\");\n      }\n      button.setAttribute(\"title\", currentTitle);\n      button.classList.remove('code-copy-button-checked');\n    }, 1000);\n    // clear code selection\n    e.clearSelection();\n  }\n  const getTextToCopy = function(trigger) {\n      const codeEl = trigger.previousElementSibling.cloneNode(true);\n      for (const childEl of codeEl.children) {\n        if (isCodeAnnotation(childEl)) {\n          childEl.remove();\n        }\n      }\n      return codeEl.innerText;\n  }\n  const clipboard = new window.ClipboardJS('.code-copy-button:not([data-in-quarto-modal])', {\n    text: getTextToCopy\n  });\n  clipboard.on('success', onCopySuccess);\n  if (window.document.getElementById('quarto-embedded-source-code-modal')) {\n    // For code content inside modals, clipBoardJS needs to be initialized with a container option\n    // TODO: Check when it could be a function (https://github.com/zenorocha/clipboard.js/issues/860)\n    const clipboardModal = new window.ClipboardJS('.code-copy-button[data-in-quarto-modal]', {\n      text: getTextToCopy,\n      container: window.document.getElementById('quarto-embedded-source-code-modal')\n    });\n    clipboardModal.on('success', onCopySuccess);\n  }\n    var localhostRegex = new RegExp(/^(?:http|https):\\/\\/localhost\\:?[0-9]*\\//);\n    var mailtoRegex = new RegExp(/^mailto:/);\n      var filterRegex = new RegExp(\"https:\\/\\/kartikghanani\\.github\\.io\\/Kartik-Ghanani-Webiste\\/\");\n    var isInternal = (href) =&gt; {\n        return filterRegex.test(href) || localhostRegex.test(href) || mailtoRegex.test(href);\n    }\n    // Inspect non-navigation links and adorn them if external\n \tvar links = window.document.querySelectorAll('a[href]:not(.nav-link):not(.navbar-brand):not(.toc-action):not(.sidebar-link):not(.sidebar-item-toggle):not(.pagination-link):not(.no-external):not([aria-hidden]):not(.dropdown-item):not(.quarto-navigation-tool):not(.about-link)');\n    for (var i=0; i&lt;links.length; i++) {\n      const link = links[i];\n      if (!isInternal(link.href)) {\n        // undo the damage that might have been done by quarto-nav.js in the case of\n        // links that we want to consider external\n        if (link.dataset.originalHref !== undefined) {\n          link.href = link.dataset.originalHref;\n        }\n      }\n    }\n  function tippyHover(el, contentFn, onTriggerFn, onUntriggerFn) {\n    const config = {\n      allowHTML: true,\n      maxWidth: 500,\n      delay: 100,\n      arrow: false,\n      appendTo: function(el) {\n          return el.parentElement;\n      },\n      interactive: true,\n      interactiveBorder: 10,\n      theme: 'quarto',\n      placement: 'bottom-start',\n    };\n    if (contentFn) {\n      config.content = contentFn;\n    }\n    if (onTriggerFn) {\n      config.onTrigger = onTriggerFn;\n    }\n    if (onUntriggerFn) {\n      config.onUntrigger = onUntriggerFn;\n    }\n    window.tippy(el, config); \n  }\n  const noterefs = window.document.querySelectorAll('a[role=\"doc-noteref\"]');\n  for (var i=0; i&lt;noterefs.length; i++) {\n    const ref = noterefs[i];\n    tippyHover(ref, function() {\n      // use id or data attribute instead here\n      let href = ref.getAttribute('data-footnote-href') || ref.getAttribute('href');\n      try { href = new URL(href).hash; } catch {}\n      const id = href.replace(/^#\\/?/, \"\");\n      const note = window.document.getElementById(id);\n      if (note) {\n        return note.innerHTML;\n      } else {\n        return \"\";\n      }\n    });\n  }\n  const xrefs = window.document.querySelectorAll('a.quarto-xref');\n  const processXRef = (id, note) =&gt; {\n    // Strip column container classes\n    const stripColumnClz = (el) =&gt; {\n      el.classList.remove(\"page-full\", \"page-columns\");\n      if (el.children) {\n        for (const child of el.children) {\n          stripColumnClz(child);\n        }\n      }\n    }\n    stripColumnClz(note)\n    if (id === null || id.startsWith('sec-')) {\n      // Special case sections, only their first couple elements\n      const container = document.createElement(\"div\");\n      if (note.children && note.children.length &gt; 2) {\n        container.appendChild(note.children[0].cloneNode(true));\n        for (let i = 1; i &lt; note.children.length; i++) {\n          const child = note.children[i];\n          if (child.tagName === \"P\" && child.innerText === \"\") {\n            continue;\n          } else {\n            container.appendChild(child.cloneNode(true));\n            break;\n          }\n        }\n        if (window.Quarto?.typesetMath) {\n          window.Quarto.typesetMath(container);\n        }\n        return container.innerHTML\n      } else {\n        if (window.Quarto?.typesetMath) {\n          window.Quarto.typesetMath(note);\n        }\n        return note.innerHTML;\n      }\n    } else {\n      // Remove any anchor links if they are present\n      const anchorLink = note.querySelector('a.anchorjs-link');\n      if (anchorLink) {\n        anchorLink.remove();\n      }\n      if (window.Quarto?.typesetMath) {\n        window.Quarto.typesetMath(note);\n      }\n      // TODO in 1.5, we should make sure this works without a callout special case\n      if (note.classList.contains(\"callout\")) {\n        return note.outerHTML;\n      } else {\n        return note.innerHTML;\n      }\n    }\n  }\n  for (var i=0; i&lt;xrefs.length; i++) {\n    const xref = xrefs[i];\n    tippyHover(xref, undefined, function(instance) {\n      instance.disable();\n      let url = xref.getAttribute('href');\n      let hash = undefined; \n      if (url.startsWith('#')) {\n        hash = url;\n      } else {\n        try { hash = new URL(url).hash; } catch {}\n      }\n      if (hash) {\n        const id = hash.replace(/^#\\/?/, \"\");\n        const note = window.document.getElementById(id);\n        if (note !== null) {\n          try {\n            const html = processXRef(id, note.cloneNode(true));\n            instance.setContent(html);\n          } finally {\n            instance.enable();\n            instance.show();\n          }\n        } else {\n          // See if we can fetch this\n          fetch(url.split('#')[0])\n          .then(res =&gt; res.text())\n          .then(html =&gt; {\n            const parser = new DOMParser();\n            const htmlDoc = parser.parseFromString(html, \"text/html\");\n            const note = htmlDoc.getElementById(id);\n            if (note !== null) {\n              const html = processXRef(id, note);\n              instance.setContent(html);\n            } \n          }).finally(() =&gt; {\n            instance.enable();\n            instance.show();\n          });\n        }\n      } else {\n        // See if we can fetch a full url (with no hash to target)\n        // This is a special case and we should probably do some content thinning / targeting\n        fetch(url)\n        .then(res =&gt; res.text())\n        .then(html =&gt; {\n          const parser = new DOMParser();\n          const htmlDoc = parser.parseFromString(html, \"text/html\");\n          const note = htmlDoc.querySelector('main.content');\n          if (note !== null) {\n            // This should only happen for chapter cross references\n            // (since there is no id in the URL)\n            // remove the first header\n            if (note.children.length &gt; 0 && note.children[0].tagName === \"HEADER\") {\n              note.children[0].remove();\n            }\n            const html = processXRef(null, note);\n            instance.setContent(html);\n          } \n        }).finally(() =&gt; {\n          instance.enable();\n          instance.show();\n        });\n      }\n    }, function(instance) {\n    });\n  }\n      let selectedAnnoteEl;\n      const selectorForAnnotation = ( cell, annotation) =&gt; {\n        let cellAttr = 'data-code-cell=\"' + cell + '\"';\n        let lineAttr = 'data-code-annotation=\"' +  annotation + '\"';\n        const selector = 'span[' + cellAttr + '][' + lineAttr + ']';\n        return selector;\n      }\n      const selectCodeLines = (annoteEl) =&gt; {\n        const doc = window.document;\n        const targetCell = annoteEl.getAttribute(\"data-target-cell\");\n        const targetAnnotation = annoteEl.getAttribute(\"data-target-annotation\");\n        const annoteSpan = window.document.querySelector(selectorForAnnotation(targetCell, targetAnnotation));\n        const lines = annoteSpan.getAttribute(\"data-code-lines\").split(\",\");\n        const lineIds = lines.map((line) =&gt; {\n          return targetCell + \"-\" + line;\n        })\n        let top = null;\n        let height = null;\n        let parent = null;\n        if (lineIds.length &gt; 0) {\n            //compute the position of the single el (top and bottom and make a div)\n            const el = window.document.getElementById(lineIds[0]);\n            top = el.offsetTop;\n            height = el.offsetHeight;\n            parent = el.parentElement.parentElement;\n          if (lineIds.length &gt; 1) {\n            const lastEl = window.document.getElementById(lineIds[lineIds.length - 1]);\n            const bottom = lastEl.offsetTop + lastEl.offsetHeight;\n            height = bottom - top;\n          }\n          if (top !== null && height !== null && parent !== null) {\n            // cook up a div (if necessary) and position it \n            let div = window.document.getElementById(\"code-annotation-line-highlight\");\n            if (div === null) {\n              div = window.document.createElement(\"div\");\n              div.setAttribute(\"id\", \"code-annotation-line-highlight\");\n              div.style.position = 'absolute';\n              parent.appendChild(div);\n            }\n            div.style.top = top - 2 + \"px\";\n            div.style.height = height + 4 + \"px\";\n            div.style.left = 0;\n            let gutterDiv = window.document.getElementById(\"code-annotation-line-highlight-gutter\");\n            if (gutterDiv === null) {\n              gutterDiv = window.document.createElement(\"div\");\n              gutterDiv.setAttribute(\"id\", \"code-annotation-line-highlight-gutter\");\n              gutterDiv.style.position = 'absolute';\n              const codeCell = window.document.getElementById(targetCell);\n              const gutter = codeCell.querySelector('.code-annotation-gutter');\n              gutter.appendChild(gutterDiv);\n            }\n            gutterDiv.style.top = top - 2 + \"px\";\n            gutterDiv.style.height = height + 4 + \"px\";\n          }\n          selectedAnnoteEl = annoteEl;\n        }\n      };\n      const unselectCodeLines = () =&gt; {\n        const elementsIds = [\"code-annotation-line-highlight\", \"code-annotation-line-highlight-gutter\"];\n        elementsIds.forEach((elId) =&gt; {\n          const div = window.document.getElementById(elId);\n          if (div) {\n            div.remove();\n          }\n        });\n        selectedAnnoteEl = undefined;\n      };\n        // Handle positioning of the toggle\n    window.addEventListener(\n      \"resize\",\n      throttle(() =&gt; {\n        elRect = undefined;\n        if (selectedAnnoteEl) {\n          selectCodeLines(selectedAnnoteEl);\n        }\n      }, 10)\n    );\n    function throttle(fn, ms) {\n    let throttle = false;\n    let timer;\n      return (...args) =&gt; {\n        if(!throttle) { // first call gets through\n            fn.apply(this, args);\n            throttle = true;\n        } else { // all the others get throttled\n            if(timer) clearTimeout(timer); // cancel #2\n            timer = setTimeout(() =&gt; {\n              fn.apply(this, args);\n              timer = throttle = false;\n            }, ms);\n        }\n      };\n    }\n      // Attach click handler to the DT\n      const annoteDls = window.document.querySelectorAll('dt[data-target-cell]');\n      for (const annoteDlNode of annoteDls) {\n        annoteDlNode.addEventListener('click', (event) =&gt; {\n          const clickedEl = event.target;\n          if (clickedEl !== selectedAnnoteEl) {\n            unselectCodeLines();\n            const activeEl = window.document.querySelector('dt[data-target-cell].code-annotation-active');\n            if (activeEl) {\n              activeEl.classList.remove('code-annotation-active');\n            }\n            selectCodeLines(clickedEl);\n            clickedEl.classList.add('code-annotation-active');\n          } else {\n            // Unselect the line\n            unselectCodeLines();\n            clickedEl.classList.remove('code-annotation-active');\n          }\n        });\n      }\n  const findCites = (el) =&gt; {\n    const parentEl = el.parentElement;\n    if (parentEl) {\n      const cites = parentEl.dataset.cites;\n      if (cites) {\n        return {\n          el,\n          cites: cites.split(' ')\n        };\n      } else {\n        return findCites(el.parentElement)\n      }\n    } else {\n      return undefined;\n    }\n  };\n  var bibliorefs = window.document.querySelectorAll('a[role=\"doc-biblioref\"]');\n  for (var i=0; i&lt;bibliorefs.length; i++) {\n    const ref = bibliorefs[i];\n    const citeInfo = findCites(ref);\n    if (citeInfo) {\n      tippyHover(citeInfo.el, function() {\n        var popup = window.document.createElement('div');\n        citeInfo.cites.forEach(function(cite) {\n          var citeDiv = window.document.createElement('div');\n          citeDiv.classList.add('hanging-indent');\n          citeDiv.classList.add('csl-entry');\n          var biblioDiv = window.document.getElementById('ref-' + cite);\n          if (biblioDiv) {\n            citeDiv.innerHTML = biblioDiv.innerHTML;\n          }\n          popup.appendChild(citeDiv);\n        });\n        return popup.innerHTML;\n      });\n    }\n  }\n});\n&lt;/script&gt;\n&lt;/div&gt; &lt;!-- /content --&gt;\n\n&lt;/body&gt;\n\n&lt;/html&gt;"
  },
  {
    "objectID": "code.html",
    "href": "code.html",
    "title": "Code and References",
    "section": "",
    "text": "# Load necessary libraries\nlibrary(readr)       # For reading CSV files\nlibrary(dplyr)       # For data manipulation\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(janitor)     # For cleaning column names\n\n\nAttaching package: 'janitor'\n\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n\nlibrary(ggplot2)     # For visualizations\nlibrary(ggrepel)     # For better text labels in plots\nlibrary(plotly)      # For interactive plots\n\n\nAttaching package: 'plotly'\n\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\n\nThe following object is masked from 'package:stats':\n\n    filter\n\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\nlibrary(ggiraph)     # For interactive ggplot elements\n\n# Load the dataset (replace \"path_to_your_file.csv\" with the actual file path)\nfile_path &lt;- \"C:\\\\Users\\\\karti\\\\OneDrive\\\\Desktop\\\\Music Streaming Services.csv\"\ndf &lt;- read_csv(file_path, show_col_types = FALSE)\n\n# Clean column names\ndf &lt;- df %&gt;% janitor::clean_names()\n\n# Data cleaning\ndf_clean &lt;- df %&gt;%\n  mutate(\n    price_per_stream = as.numeric(gsub(\"[^0-9\\\\.]\", \"\", average_price_paid_per_stream)),\n    total_users = as.numeric(gsub(\"[^0-9\\\\.]\", \"\", total_users_millions)),\n    indie_label_revenue = as.numeric(gsub(\"[^0-9\\\\.]\", \"\", artist_on_indie_label_receives_per_play_2016)),\n    market_share = as.numeric(gsub(\"[^0-9\\\\.]\", \"\", market_share))\n  ) %&gt;%\n  filter(\n    !is.na(streaming_service) & \n    !is.na(price_per_stream) & \n    !is.na(total_users) & \n    !is.na(market_share)\n  )\n\n# Check cleaned data\nhead(df_clean)\n\n# A tibble: 6 × 21\n  streaming_service average_price_paid_per_s…¹ total_users_millions market_share\n  &lt;chr&gt;             &lt;chr&gt;                                     &lt;dbl&gt;        &lt;dbl&gt;\n1 Napster           $0.019                                      5           0.52\n2 Tidal             $0.0125                                     4.2         0.1 \n3 Apple Music       $0.00735                                   36           7.18\n4 Google Play Music $0.00676                                   10           2.36\n5 Deezer            $0.0064                                    16           2.19\n6 Spotify           $0.00437                                  159          63   \n# ℹ abbreviated name: ¹​average_price_paid_per_stream\n# ℹ 17 more variables: market_revenue &lt;chr&gt;, x10_000 &lt;dbl&gt;,\n#   x2015_v_2017_diff &lt;chr&gt;, percent_free_users &lt;chr&gt;, paid_users &lt;dbl&gt;,\n#   free_ad_supported_users &lt;dbl&gt;,\n#   signed_plays_needed_to_earn_minimum_wage_1_472 &lt;dbl&gt;,\n#   average_streams_per_song &lt;dbl&gt;,\n#   signed_percent_of_users_needed_to_earn_minimum_wage &lt;chr&gt;, …\n\n# Create an interactive bar chart using ggplot and plotly\np1 &lt;- ggplot(df_clean, aes(x = reorder(streaming_service, price_per_stream), y = price_per_stream, fill = streaming_service)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  scale_fill_brewer(palette = \"Set3\") +\n  labs(\n    title = \"Interactive: Average Price Paid per Stream by Streaming Service\",\n    x = \"Streaming Service\",\n    y = \"Price Paid per Stream ($)\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0.5, size = 18, face = \"bold\"),\n    axis.text = element_text(size = 12),\n    axis.title = element_text(size = 14),\n    legend.position = \"none\"\n  )\n\n# Convert ggplot to an interactive plotly plot\np1_interactive &lt;- ggplotly(p1)\np1_interactive\n\n\n\n\n\n\n# Further Improved Interactive Bubble Chart\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(ggrepel)\n\n# Improved Bubble Chart with Interactive Tooltips and Better Color\np4 &lt;- ggplot(df_clean, aes(x = total_users, y = indie_label_revenue, size = market_share, color = streaming_service, label = streaming_service)) +\n  geom_point(alpha = 0.7) +\n  scale_size_continuous(range = c(5, 15), guide = guide_legend(title = \"Market Share (%)\")) +\n  scale_color_viridis_d() +\n  geom_text_repel(aes(label = streaming_service), size = 3, color = \"black\", max.overlaps = 10) +\n  labs(\n    title = \"Interactive Bubble Chart: Total Users vs. Indie Label Revenue\",\n    x = \"Total Users (Millions)\",\n    y = \"Indie Label Revenue ($ per play)\",\n    size = \"Market Share (%)\",\n    color = \"Streaming Service\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0.5, size = 18, face = \"bold\"),\n    axis.text = element_text(size = 12),\n    axis.title = element_text(size = 14),\n    legend.position = \"right\"\n  )\n\n# Convert to an interactive plotly plot\np4_interactive &lt;- ggplotly(p4, tooltip = c(\"label\", \"x\", \"y\", \"size\"))\n\nWarning in geom2trace.default(dots[[1L]][[1L]], dots[[2L]][[1L]], dots[[3L]][[1L]]): geom_GeomTextRepel() has yet to be implemented in plotly.\n  If you'd like to see this geom implemented,\n  Please open an issue with your example code at\n  https://github.com/ropensci/plotly/issues\n\np4_interactive\n\n\n\n\n\n\nlibrary(readr)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(plotly)\n\n# Load the dataset\nfile_path &lt;- \"C:\\\\Users\\\\karti\\\\OneDrive\\\\Desktop\\\\Female and Male Literacy Rates.csv\" # Update with the correct path\ndf &lt;- read_csv(file_path)\n\nRows: 41 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (4): year, global adult female literacy rate (%), global adult male lite...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# Rename columns for easier reference\ndf_clean &lt;- df %&gt;%\n  rename(\n    year = year,  # Assuming the column is named \"Year\"\n    female_literacy = `global adult female literacy rate (%)`,\n    male_literacy = `global adult male literacy rate (%)`\n  ) %&gt;%\n  filter(!is.na(female_literacy) & !is.na(male_literacy)) %&gt;%\n  mutate(year = as.numeric(year))\n\n# Reshape data for easy plotting\ndf_long &lt;- df_clean %&gt;%\n  pivot_longer(cols = c(female_literacy, male_literacy),\n               names_to = \"gender\", values_to = \"literacy_rate\") %&gt;%\n  mutate(gender = case_when(\n    gender == \"female_literacy\" ~ \"Female\",\n    gender == \"male_literacy\" ~ \"Male\"\n  ))\n\n# Line chart visualization\nline_plot &lt;- ggplot(df_long, aes(x = year, y = literacy_rate, color = gender, group = gender)) +\n  geom_line(size = 1.2) +  # Use a thicker line for better visibility\n  geom_point(size = 3, alpha = 0.7) +  # Add points to highlight key data points\n  labs(\n    title = \"Trends in Literacy Rates by Gender (1976 to 2017)\",\n    x = \"Year\",\n    y = \"Literacy Rate (%)\",\n    color = \"Gender\"\n  ) +\n  scale_color_manual(values = c(\"Female\" = \"purple\", \"Male\" = \"orange\")) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0.5, size = 18, face = \"bold\"),\n    axis.text = element_text(size = 12),\n    axis.title = element_text(size = 14),\n    legend.position = \"top\"\n  )\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n# Convert ggplot to interactive plotly plot\ninteractive_line_plot &lt;- ggplotly(line_plot)\n\n# Print the interactive plot\ninteractive_line_plot\n\n\n\n\n\n\n# Load necessary libraries\nlibrary(ggplot2)   # For plotting\nlibrary(dplyr)     # For data manipulation\nlibrary(tidyr)     # For reshaping data\nlibrary(plotly)\n\n\n\n# Load the dataset\nfile_path &lt;- \"C:\\\\Users\\\\karti\\\\OneDrive\\\\Desktop\\\\Female and Male Literacy Rates.csv\"\ndf &lt;- read_csv(file_path)\n\nRows: 41 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (4): year, global adult female literacy rate (%), global adult male lite...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# Rename columns for easier use\ncolnames(df) &lt;- c(\"Year\", \"Female_Literacy\", \"Male_Literacy\", \"Extra_Column\")\n\n# Remove any unnecessary columns\ndf &lt;- df %&gt;% select(Year, Female_Literacy, Male_Literacy)\n\n# Reshape data into long format\ndf_long &lt;- df %&gt;%\n  pivot_longer(cols = c(Female_Literacy, Male_Literacy), \n               names_to = \"Gender\", \n               values_to = \"Literacy_Rate\")\n\n# Create an enhanced interactive area plot using plotly\ninteractive_plot &lt;- plot_ly(df_long, x = ~Year, y = ~Literacy_Rate, color = ~Gender, type = 'scatter', mode = 'lines+markers',\n                            fill = 'tozeroy', text = ~paste(\"Year:\", Year, \"&lt;br&gt;Literacy Rate:\", Literacy_Rate, \"%\"),\n                            hoverinfo = 'text') %&gt;%\n  layout(\n    title = \"Global Literacy Rates by Gender (1976 to 2017)\",\n    xaxis = list(title = \"Year\"),\n    yaxis = list(title = \"Literacy Rate (%)\"),\n    hovermode = 'closest',\n    legend = list(title = list(text = \"Gender\")),\n    \n    # Adding a dropdown for color options\n    updatemenus = list(\n      list(\n        buttons = list(\n          list(method = \"restyle\",\n               args = list(\"line.color\", list(\"blue\", \"orange\")),\n               label = \"Blue & Orange\"),\n          list(method = \"restyle\",\n               args = list(\"line.color\", list(\"red\", \"green\")),\n               label = \"Red & Green\"),\n          list(method = \"restyle\",\n               args = list(\"line.color\", list(\"purple\", \"yellow\")),\n               label = \"Purple & Yellow\")\n        ),\n        direction = \"down\",\n        x = 0.1, y = 1.1,  # Position of the dropdown\n        showactive = TRUE,\n        xanchor = \"left\",\n        yanchor = \"top\"\n      )\n    )\n  )\n\n# Display the interactive plot\ninteractive_plot\n\nWarning in RColorBrewer::brewer.pal(N, \"Set2\"): minimal value for n is 3, returning requested palette with 3 different levels\nWarning in RColorBrewer::brewer.pal(N, \"Set2\"): minimal value for n is 3, returning requested palette with 3 different levels"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "Hi, I’m Kartik Ghanani, and I am currently pursuing my master’s in data analytics engineering at George Mason University. Originally from India, I completed my B.Tech from Acropolis Institute of Technology in Indore. I have a passion for exploring and analyzing data, transforming complex datasets into meaningful insights that drive decision-making.\nThroughout my journey, I’ve worked on several projects that showcase my skills in data visualization, statistical analysis, and optimization. I’m experienced in using tools like R and Python to solve real-world problems and tell compelling data stories, and these projects are a reflection of my growth and capabilities in the field of data analytics.\nMy goal is to become a skilled data analyst in a reputed company, where I can contribute my expertise and continue learning in the ever-evolving field of data analytics. In my free time, I enjoy playing football, gaming, and table tennis, which helps me stay balanced and energized.\nFeel free to explore my projects and redesigned visualizations on this website!\nFeel free to connect with me on LinkedIn"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to My STAT 515 Redesign Project",
    "section": "",
    "text": "This project is all about redesigning visualizations to enhance their effectiveness. Explore different sections of the website to learn more!\n\n\nCheck out the Redesign Project where I showcase the original and redesigned visualizations.\n\n\n\nAll code used in this project is shared on the Code and References page, so you can follow along or reuse it for your work.\n\n\n\nWant to know more about me? Visit the About page."
  },
  {
    "objectID": "index.html#explore-my-redesign",
    "href": "index.html#explore-my-redesign",
    "title": "Welcome to My STAT 515 Redesign Project",
    "section": "",
    "text": "Check out the Redesign Project where I showcase the original and redesigned visualizations."
  },
  {
    "objectID": "index.html#view-the-code",
    "href": "index.html#view-the-code",
    "title": "Welcome to My STAT 515 Redesign Project",
    "section": "",
    "text": "All code used in this project is shared on the Code and References page, so you can follow along or reuse it for your work."
  },
  {
    "objectID": "index.html#about-me",
    "href": "index.html#about-me",
    "title": "Welcome to My STAT 515 Redesign Project",
    "section": "",
    "text": "Want to know more about me? Visit the About page."
  }
]