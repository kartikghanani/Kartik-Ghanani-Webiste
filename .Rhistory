library(plotly)
# Load the dataset
file_path <- "C:\\Users\\karti\\OneDrive\\Desktop\\Female and Male Literacy Rates.csv"
df <- read_csv(file_path)
# Load necessary libraries
library(ggplot2)   # For plotting
library(dplyr)     # For data manipulation
library(tidyr)     # For reshaping data
library(plotly)
# Load the dataset
file_path <- "C:\Users\karti\OneDrive\Desktop\Female and Male Literacy Rates.csv"
# Load necessary libraries
library(ggplot2)   # For plotting
library(dplyr)     # For data manipulation
library(tidyr)     # For reshaping data
library(plotly)
# Load the dataset
file_path <- "C:\\Users\\karti\\OneDrive\\Desktop\\Female and Male Literacy Rates.csv"
df <- read_csv(file_path)
# Load necessary libraries
library(ggplot2)   # For plotting
library(dplyr)     # For data manipulation
library(tidyr)     # For reshaping data
library(plotly)
# Load the dataset
file_path <- "C:\\Users\\karti\\OneDrive\\Desktop\\Female and Male Literacy Rates.csv"
df <- read_csv(file_path)
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(plotly)
# Load the dataset
file_path <- "C:\\Users\\karti\\OneDrive\\Desktop\\Female and Male Literacy Rates.csv" # Update with the correct path
df <- read_csv(file_path)
# Rename columns for easier reference
df_clean <- df %>%
rename(
year = year,  # Assuming the column is named "Year"
female_literacy = `global adult female literacy rate (%)`,
male_literacy = `global adult male literacy rate (%)`
) %>%
filter(!is.na(female_literacy) & !is.na(male_literacy)) %>%
mutate(year = as.numeric(year))
# Reshape data for easy plotting
df_long <- df_clean %>%
pivot_longer(cols = c(female_literacy, male_literacy),
names_to = "gender", values_to = "literacy_rate") %>%
mutate(gender = case_when(
gender == "female_literacy" ~ "Female",
gender == "male_literacy" ~ "Male"
))
# Line chart visualization
line_plot <- ggplot(df_long, aes(x = year, y = literacy_rate, color = gender, group = gender)) +
geom_line(size = 1.2) +  # Use a thicker line for better visibility
geom_point(size = 3, alpha = 0.7) +  # Add points to highlight key data points
labs(
title = "Trends in Literacy Rates by Gender (1976 to 2017)",
x = "Year",
y = "Literacy Rate (%)",
color = "Gender"
) +
scale_color_manual(values = c("Female" = "purple", "Male" = "orange")) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 18, face = "bold"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
legend.position = "top"
)
# Convert ggplot to interactive plotly plot
interactive_line_plot <- ggplotly(line_plot)
# Print the interactive plot
interactive_line_plot
# Load necessary libraries
library(ggplot2)   # For plotting
library(dplyr)     # For data manipulation
library(tidyr)     # For reshaping data
library(plotly)
# Load the dataset
file_path <- "C:\\Users\\karti\\OneDrive\\Desktop\\Female and Male Literacy Rates.csv"
df <- read_csv(file_path)
# Rename columns for easier use
colnames(df) <- c("Year", "Female_Literacy", "Male_Literacy", "Extra_Column")
# Remove any unnecessary columns
df <- df %>% select(Year, Female_Literacy, Male_Literacy)
# Reshape data into long format
df_long <- df %>%
pivot_longer(cols = c(Female_Literacy, Male_Literacy),
names_to = "Gender",
values_to = "Literacy_Rate")
# Create an enhanced interactive area plot using plotly
interactive_plot <- plot_ly(df_long, x = ~Year, y = ~Literacy_Rate, color = ~Gender, type = 'scatter', mode = 'lines+markers',
fill = 'tozeroy', text = ~paste("Year:", Year, "<br>Literacy Rate:", Literacy_Rate, "%"),
hoverinfo = 'text') %>%
layout(
title = "Global Literacy Rates by Gender (1976 to 2017)",
xaxis = list(title = "Year"),
yaxis = list(title = "Literacy Rate (%)"),
hovermode = 'closest',
legend = list(title = list(text = "Gender")),
# Adding a dropdown for color options
updatemenus = list(
list(
buttons = list(
list(method = "restyle",
args = list("line.color", list("blue", "orange")),
label = "Blue & Orange"),
list(method = "restyle",
args = list("line.color", list("red", "green")),
label = "Red & Green"),
list(method = "restyle",
args = list("line.color", list("purple", "yellow")),
label = "Purple & Yellow")
),
direction = "down",
x = 0.1, y = 1.1,  # Position of the dropdown
showactive = TRUE,
xanchor = "left",
yanchor = "top"
)
)
)
# Display the interactive plot
interactive_plot
# Load necessary libraries
library(readr)       # For reading CSV files
library(dplyr)       # For data manipulation
library(janitor)     # For cleaning column names
library(ggplot2)     # For visualizations
library(ggrepel)     # For better text labels in plots
library(plotly)      # For interactive plots
library(ggiraph)     # For interactive ggplot elements
# Load the dataset (replace "path_to_your_file.csv" with the actual file path)
file_path <- "C:\\Users\\karti\\OneDrive\\Desktop\\Music Streaming Services.csv"
df <- read_csv(file_path, show_col_types = FALSE)
# Clean column names
df <- df %>% janitor::clean_names()
# Data cleaning
df_clean <- df %>%
mutate(
price_per_stream = as.numeric(gsub("[^0-9\\.]", "", average_price_paid_per_stream)),
total_users = as.numeric(gsub("[^0-9\\.]", "", total_users_millions)),
indie_label_revenue = as.numeric(gsub("[^0-9\\.]", "", artist_on_indie_label_receives_per_play_2016)),
market_share = as.numeric(gsub("[^0-9\\.]", "", market_share))
) %>%
filter(
!is.na(streaming_service) &
!is.na(price_per_stream) &
!is.na(total_users) &
!is.na(market_share)
)
# Check cleaned data
head(df_clean)
# Create an interactive bar chart using ggplot and plotly
p1 <- ggplot(df_clean, aes(x = reorder(streaming_service, price_per_stream), y = price_per_stream, fill = streaming_service)) +
geom_bar(stat = "identity") +
coord_flip() +
scale_fill_brewer(palette = "Set3") +
labs(
title = "Interactive: Average Price Paid per Stream by Streaming Service",
x = "Streaming Service",
y = "Price Paid per Stream ($)"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 18, face = "bold"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
legend.position = "none"
)
# Convert ggplot to an interactive plotly plot
p1_interactive <- ggplotly(p1)
p1_interactive
# Further Improved Interactive Bubble Chart
library(ggplot2)
library(plotly)
library(ggrepel)
# Improved Bubble Chart with Interactive Tooltips and Better Color
p4 <- ggplot(df_clean, aes(x = total_users, y = indie_label_revenue, size = market_share, color = streaming_service, label = streaming_service)) +
geom_point(alpha = 0.7) +
scale_size_continuous(range = c(5, 15), guide = guide_legend(title = "Market Share (%)")) +
scale_color_viridis_d() +
geom_text_repel(aes(label = streaming_service), size = 3, color = "black", max.overlaps = 10) +
labs(
title = "Interactive Bubble Chart: Total Users vs. Indie Label Revenue",
x = "Total Users (Millions)",
y = "Indie Label Revenue ($ per play)",
size = "Market Share (%)",
color = "Streaming Service"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 18, face = "bold"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
legend.position = "right"
)
# Convert to an interactive plotly plot
p4_interactive <- ggplotly(p4, tooltip = c("label", "x", "y", "size"))
p4_interactive
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(plotly)
# Load the dataset
file_path <- "C:\\Users\\karti\\OneDrive\\Desktop\\Female and Male Literacy Rates.csv" # Update with the correct path
df <- read_csv(file_path)
# Rename columns for easier reference
df_clean <- df %>%
rename(
year = year,  # Assuming the column is named "Year"
female_literacy = `global adult female literacy rate (%)`,
male_literacy = `global adult male literacy rate (%)`
) %>%
filter(!is.na(female_literacy) & !is.na(male_literacy)) %>%
mutate(year = as.numeric(year))
# Reshape data for easy plotting
df_long <- df_clean %>%
pivot_longer(cols = c(female_literacy, male_literacy),
names_to = "gender", values_to = "literacy_rate") %>%
mutate(gender = case_when(
gender == "female_literacy" ~ "Female",
gender == "male_literacy" ~ "Male"
))
# Line chart visualization
line_plot <- ggplot(df_long, aes(x = year, y = literacy_rate, color = gender, group = gender)) +
geom_line(size = 1.2) +  # Use a thicker line for better visibility
geom_point(size = 3, alpha = 0.7) +  # Add points to highlight key data points
labs(
title = "Trends in Literacy Rates by Gender (1976 to 2017)",
x = "Year",
y = "Literacy Rate (%)",
color = "Gender"
) +
scale_color_manual(values = c("Female" = "purple", "Male" = "orange")) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 18, face = "bold"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
legend.position = "top"
)
# Convert ggplot to interactive plotly plot
interactive_line_plot <- ggplotly(line_plot)
# Print the interactive plot
interactive_line_plot
# Load necessary libraries
library(ggplot2)   # For plotting
library(dplyr)     # For data manipulation
library(tidyr)     # For reshaping data
library(plotly)
# Load the dataset
file_path <- "C:\\Users\\karti\\OneDrive\\Desktop\\Female and Male Literacy Rates.csv"
df <- read_csv(file_path)
# Rename columns for easier use
colnames(df) <- c("Year", "Female_Literacy", "Male_Literacy", "Extra_Column")
# Remove any unnecessary columns
df <- df %>% select(Year, Female_Literacy, Male_Literacy)
# Reshape data into long format
df_long <- df %>%
pivot_longer(cols = c(Female_Literacy, Male_Literacy),
names_to = "Gender",
values_to = "Literacy_Rate")
# Create an enhanced interactive area plot using plotly
interactive_plot <- plot_ly(df_long, x = ~Year, y = ~Literacy_Rate, color = ~Gender, type = 'scatter', mode = 'lines+markers',
fill = 'tozeroy', text = ~paste("Year:", Year, "<br>Literacy Rate:", Literacy_Rate, "%"),
hoverinfo = 'text') %>%
layout(
title = "Global Literacy Rates by Gender (1976 to 2017)",
xaxis = list(title = "Year"),
yaxis = list(title = "Literacy Rate (%)"),
hovermode = 'closest',
legend = list(title = list(text = "Gender")),
# Adding a dropdown for color options
updatemenus = list(
list(
buttons = list(
list(method = "restyle",
args = list("line.color", list("blue", "orange")),
label = "Blue & Orange"),
list(method = "restyle",
args = list("line.color", list("red", "green")),
label = "Red & Green"),
list(method = "restyle",
args = list("line.color", list("purple", "yellow")),
label = "Purple & Yellow")
),
direction = "down",
x = 0.1, y = 1.1,  # Position of the dropdown
showactive = TRUE,
xanchor = "left",
yanchor = "top"
)
)
)
# Display the interactive plot
interactive_plot
# Load necessary libraries
library(readr)       # For reading CSV files
library(dplyr)       # For data manipulation
library(janitor)     # For cleaning column names
library(ggplot2)     # For visualizations
library(ggrepel)     # For better text labels in plots
library(plotly)      # For interactive plots
library(ggiraph)     # For interactive ggplot elements
# Load the dataset (replace "path_to_your_file.csv" with the actual file path)
file_path <- "C:\\Users\\karti\\OneDrive\\Desktop\\Music Streaming Services.csv"
df <- read_csv(file_path, show_col_types = FALSE)
# Clean column names
df <- df %>% janitor::clean_names()
# Data cleaning
df_clean <- df %>%
mutate(
price_per_stream = as.numeric(gsub("[^0-9\\.]", "", average_price_paid_per_stream)),
total_users = as.numeric(gsub("[^0-9\\.]", "", total_users_millions)),
indie_label_revenue = as.numeric(gsub("[^0-9\\.]", "", artist_on_indie_label_receives_per_play_2016)),
market_share = as.numeric(gsub("[^0-9\\.]", "", market_share))
) %>%
filter(
!is.na(streaming_service) &
!is.na(price_per_stream) &
!is.na(total_users) &
!is.na(market_share)
)
# Check cleaned data
head(df_clean)
# Create an interactive bar chart using ggplot and plotly
p1 <- ggplot(df_clean, aes(x = reorder(streaming_service, price_per_stream), y = price_per_stream, fill = streaming_service)) +
geom_bar(stat = "identity") +
coord_flip() +
scale_fill_brewer(palette = "Set3") +
labs(
title = "Interactive: Average Price Paid per Stream by Streaming Service",
x = "Streaming Service",
y = "Price Paid per Stream ($)"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 18, face = "bold"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
legend.position = "none"
)
# Convert ggplot to an interactive plotly plot
p1_interactive <- ggplotly(p1)
p1_interactive
# Load necessary libraries
library(readr)       # For reading CSV files
library(dplyr)       # For data manipulation
library(janitor)     # For cleaning column names
library(ggplot2)     # For visualizations
library(ggrepel)     # For better text labels in plots
library(plotly)      # For interactive plots
library(ggiraph)     # For interactive ggplot elements
# Load the dataset (replace "path_to_your_file.csv" with the actual file path)
file_path <- "C:\\Users\\karti\\OneDrive\\Desktop\\Music Streaming Services.csv"
df <- read_csv(file_path, show_col_types = FALSE)
# Clean column names
df <- df %>% janitor::clean_names()
# Data cleaning
df_clean <- df %>%
mutate(
price_per_stream = as.numeric(gsub("[^0-9\\.]", "", average_price_paid_per_stream)),
total_users = as.numeric(gsub("[^0-9\\.]", "", total_users_millions)),
indie_label_revenue = as.numeric(gsub("[^0-9\\.]", "", artist_on_indie_label_receives_per_play_2016)),
market_share = as.numeric(gsub("[^0-9\\.]", "", market_share))
) %>%
filter(
!is.na(streaming_service) &
!is.na(price_per_stream) &
!is.na(total_users) &
!is.na(market_share)
)
# Check cleaned data
head(df_clean)
# Create an interactive bar chart using ggplot and plotly
p1 <- ggplot(df_clean, aes(x = reorder(streaming_service, price_per_stream), y = price_per_stream, fill = streaming_service)) +
geom_bar(stat = "identity") +
coord_flip() +
scale_fill_brewer(palette = "Set3") +
labs(
title = "Interactive: Average Price Paid per Stream by Streaming Service",
x = "Streaming Service",
y = "Price Paid per Stream ($)"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 18, face = "bold"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
legend.position = "none"
)
# Convert ggplot to an interactive plotly plot
p1_interactive <- ggplotly(p1)
p1_interactive
# Load necessary libraries
library(readr)       # For reading CSV files
library(dplyr)       # For data manipulation
library(janitor)     # For cleaning column names
library(ggplot2)     # For visualizations
library(ggrepel)     # For better text labels in plots
library(plotly)      # For interactive plots
library(ggiraph)     # For interactive ggplot elements
# Further Improved Interactive Bubble Chart
library(ggplot2)
library(plotly)
library(ggrepel)
# Load the dataset (replace "path_to_your_file.csv" with the actual file path)
file_path <- "C:\\Users\\karti\\OneDrive\\Desktop\\Music Streaming Services.csv"
df <- read_csv(file_path, show_col_types = FALSE)
# Clean column names
df <- df %>% janitor::clean_names()
# Data cleaning
df_clean <- df %>%
mutate(
price_per_stream = as.numeric(gsub("[^0-9\\.]", "", average_price_paid_per_stream)),
total_users = as.numeric(gsub("[^0-9\\.]", "", total_users_millions)),
indie_label_revenue = as.numeric(gsub("[^0-9\\.]", "", artist_on_indie_label_receives_per_play_2016)),
market_share = as.numeric(gsub("[^0-9\\.]", "", market_share))
) %>%
filter(
!is.na(streaming_service) &
!is.na(price_per_stream) &
!is.na(total_users) &
!is.na(market_share)
)
# Check cleaned data
head(df_clean)
# Further Improved Interactive Bubble Chart
library(ggplot2)
library(plotly)
library(ggrepel)
# Improved Bubble Chart with Interactive Tooltips and Better Color
p4 <- ggplot(df_clean, aes(x = total_users, y = indie_label_revenue, size = market_share, color = streaming_service, label = streaming_service)) +
geom_point(alpha = 0.7) +
scale_size_continuous(range = c(5, 15), guide = guide_legend(title = "Market Share (%)")) +
scale_color_viridis_d() +
geom_text_repel(aes(label = streaming_service), size = 3, color = "black", max.overlaps = 10) +
labs(
title = "Interactive Bubble Chart: Total Users vs. Indie Label Revenue",
x = "Total Users (Millions)",
y = "Indie Label Revenue ($ per play)",
size = "Market Share (%)",
color = "Streaming Service"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 18, face = "bold"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
legend.position = "right"
)
# Convert to an interactive plotly plot
p4_interactive <- ggplotly(p4, tooltip = c("label", "x", "y", "size"))
p4_interactive
``
# Further Improved Interactive Bubble Chart
library(ggplot2)
library(plotly)
library(ggrepel)
# Improved Bubble Chart with Interactive Tooltips and Better Color
p4 <- ggplot(df_clean, aes(x = total_users, y = indie_label_revenue, size = market_share, color = streaming_service, label = streaming_service)) +
geom_point(alpha = 0.7) +
scale_size_continuous(range = c(5, 15), guide = guide_legend(title = "Market Share (%)")) +
scale_color_viridis_d() +
geom_text_repel(aes(label = streaming_service), size = 3, color = "black", max.overlaps = 10) +
labs(
title = "Interactive Bubble Chart: Total Users vs. Indie Label Revenue",
x = "Total Users (Millions)",
y = "Indie Label Revenue ($ per play)",
size = "Market Share (%)",
color = "Streaming Service"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 18, face = "bold"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
legend.position = "right"
)
# Convert to an interactive plotly plot
p4_interactive <- ggplotly(p4, tooltip = c("label", "x", "y", "size"))
p4_interactive
# Further Improved Interactive Bubble Chart
library(ggplot2)
library(plotly)
library(ggrepel)
# Improved Bubble Chart with Interactive Tooltips and Better Color
p4 <- ggplot(df_clean, aes(x = total_users, y = indie_label_revenue, size = market_share, color = streaming_service, label = streaming_service)) +
geom_point(alpha = 0.7) +
scale_size_continuous(range = c(5, 15), guide = guide_legend(title = "Market Share (%)")) +
scale_color_viridis_d() +
geom_text_repel(aes(label = streaming_service), size = 3, color = "black", max.overlaps = 10) +
labs(
title = "Interactive Bubble Chart: Total Users vs. Indie Label Revenue",
x = "Total Users (Millions)",
y = "Indie Label Revenue ($ per play)",
size = "Market Share (%)",
color = "Streaming Service"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 18, face = "bold"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
legend.position = "right"
)
# Convert to an interactive plotly plot
p4_interactive <- ggplotly(p4, tooltip = c("label", "x", "y", "size"))
p4_interactive
