indie_label_revenue = as.numeric(gsub("[^0-9\\.]", "", artist_on_indie_label_receives_per_play_2016)),
market_share = as.numeric(gsub("[^0-9\\.]", "", market_share))
) %>%
# Filter out rows with missing values in relevant columns
filter(
!is.na(streaming_service) &
!is.na(price_per_stream) &
!is.na(total_users) &
!is.na(market_share)
)
# Check the cleaned dataset
head(df_clean)
str(df_clean)
# Summary statistics of the cleaned dataset
summary(df_clean)
# Check unique streaming services
unique(df_clean$streaming_service)
# Create a bar chart to visualize average price paid per stream by streaming service
ggplot(df_clean, aes(x = reorder(streaming_service, price_per_stream), y = price_per_stream, fill = streaming_service)) +
geom_bar(stat = "identity") +
coord_flip() +
scale_fill_brewer(palette = "Set3") +
labs(
title = "Average Price Paid per Stream by Streaming Service",
x = "Streaming Service",
y = "Price Paid per Stream ($)"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 18, face = "bold"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
legend.position = "none"
)
knitr::opts_chunk$set(echo = TRUE)
# Load necessary libraries
library(readr)      # For reading CSV files
library(dplyr)      # For data manipulation
library(janitor)    # For cleaning column names
library(ggplot2)    # For visualizations
library(ggrepel)    # For improved text labels in plots
# Load the dataset (replace "path_to_your_file.csv" with the actual file path)
file_path <- "path_to_your_file.csv"
df <- read_csv(file_path, show_col_types = FALSE)
# Load the dataset (replace "path_to_your_file.csv" with the actual file path)
file_path <- ""C:\\Users\\karti\\OneDrive\\Desktop\\Music Streaming Services.csv"
# Load the dataset (replace "path_to_your_file.csv" with the actual file path)
file_path <- ""C:\\Users\\karti\\OneDrive\\Desktop\\Music Streaming Services.csv"
# Load the dataset (replace "path_to_your_file.csv" with the actual file path)
file_path <- "C:\\Users\\karti\\OneDrive\\Desktop\\Music Streaming Services.csv"
df <- read_csv(file_path, show_col_types = FALSE)
# Clean column names to make them consistent
df <- df %>%
janitor::clean_names()
# View the first few rows and inspect the structure of the dataset
head(df)
str(df)
colnames(df)  # To see the available column names
# Modify data cleaning step based on inspected column names
df_clean <- df %>%
# Remove non-numeric symbols (like "$", ",") from numeric columns and convert to numeric
mutate(
price_per_stream = as.numeric(gsub("[^0-9\\.]", "", average_price_paid_per_stream)),
total_users = as.numeric(gsub("[^0-9\\.]", "", total_users_millions)),
indie_label_revenue = as.numeric(gsub("[^0-9\\.]", "", artist_on_indie_label_receives_per_play_2016)),
market_share = as.numeric(gsub("[^0-9\\.]", "", market_share))
) %>%
# Filter rows with missing values for important variables
filter(
!is.na(streaming_service) &
!is.na(price_per_stream) &
!is.na(total_users) &
!is.na(market_share)
)
# Check the cleaned dataset
head(df_clean)
str(df_clean)
# Summary statistics of the cleaned dataset
summary(df_clean)
# Check unique streaming services
unique(df_clean$streaming_service)
# Create a bar chart to visualize average price paid per stream by streaming service
ggplot(df_clean, aes(x = reorder(streaming_service, price_per_stream), y = price_per_stream, fill = streaming_service)) +
geom_bar(stat = "identity") +
coord_flip() +
scale_fill_brewer(palette = "Set3") +
labs(
title = "Average Price Paid per Stream by Streaming Service",
x = "Streaming Service",
y = "Price Paid per Stream ($)"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 18, face = "bold"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
legend.position = "none"
)
knitr::opts_chunk$set(echo = TRUE)
# Load necessary libraries
library(readr)      # For reading CSV files
library(dplyr)      # For data manipulation
library(janitor)    # For cleaning column names
library(ggplot2)    # For visualizations
library(ggrepel)    # For improved text labels in plots
# Bar chart for total users by streaming service
ggplot(df_clean, aes(x = reorder(streaming_service, total_users), y = total_users, fill = streaming_service)) +
geom_bar(stat = "identity") +
coord_flip() +
scale_fill_brewer(palette = "Set2") +
labs(
title = "Total Users by Streaming Service (in Millions)",
x = "Streaming Service",
y = "Total Users (Millions)"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 18, face = "bold"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
legend.position = "none"
)
# Scatter plot for indie label revenue vs. market share
ggplot(df_clean, aes(x = indie_label_revenue, y = market_share, label = streaming_service)) +
geom_point(aes(color = streaming_service), size = 4, alpha = 0.7) +
geom_text_repel() +
scale_color_brewer(palette = "Dark2") +
labs(
title = "Revenue to Indie Artists vs. Market Share by Streaming Service",
x = "Revenue Paid to Indie Artists (per play)",
y = "Market Share (%)",
color = "Streaming Service"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 18, face = "bold"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14)
)
knitr::opts_chunk$set(echo = TRUE)
# Load necessary libraries
# Load necessary libraries
library(readr)       # For reading CSV files
library(dplyr)       # For data manipulation
library(janitor)     # For cleaning column names
library(ggplot2)     # For visualizations
library(ggrepel)     # For better text labels in plots
library(plotly)      # For interactive plots
library(ggiraph)     # For interactive ggplot elements
install.packages("ggiraph")
knitr::opts_chunk$set(echo = TRUE)
# Load necessary libraries
# Load necessary libraries
library(readr)       # For reading CSV files
library(dplyr)       # For data manipulation
library(janitor)     # For cleaning column names
library(ggplot2)     # For visualizations
library(ggrepel)     # For better text labels in plots
library(plotly)      # For interactive plots
library(ggiraph)     # For interactive ggplot elements
# Load the dataset (replace "path_to_your_file.csv" with the actual file path)
file_path <- "C:\\Users\\karti\\OneDrive\\Desktop\\Music Streaming Services.csv"
df <- read_csv(file_path, show_col_types = FALSE)
# Clean column names
df <- df %>% janitor::clean_names()
# Data cleaning
df_clean <- df %>%
mutate(
price_per_stream = as.numeric(gsub("[^0-9\\.]", "", average_price_paid_per_stream)),
total_users = as.numeric(gsub("[^0-9\\.]", "", total_users_millions)),
indie_label_revenue = as.numeric(gsub("[^0-9\\.]", "", artist_on_indie_label_receives_per_play_2016)),
market_share = as.numeric(gsub("[^0-9\\.]", "", market_share))
) %>%
filter(
!is.na(streaming_service) &
!is.na(price_per_stream) &
!is.na(total_users) &
!is.na(market_share)
)
# Check cleaned data
head(df_clean)
knitr::opts_chunk$set(echo = TRUE)
# Load necessary libraries
# Load necessary libraries
library(readr)       # For reading CSV files
library(dplyr)       # For data manipulation
library(janitor)     # For cleaning column names
library(ggplot2)     # For visualizations
library(ggrepel)     # For better text labels in plots
library(plotly)      # For interactive plots
library(ggiraph)     # For interactive ggplot elements
# Load the dataset (replace "path_to_your_file.csv" with the actual file path)
file_path <- "C:\\Users\\karti\\OneDrive\\Desktop\\Music Streaming Services.csv"
df <- read_csv(file_path, show_col_types = FALSE)
# Clean column names
df <- df %>% janitor::clean_names()
# Data cleaning
df_clean <- df %>%
mutate(
price_per_stream = as.numeric(gsub("[^0-9\\.]", "", average_price_paid_per_stream)),
total_users = as.numeric(gsub("[^0-9\\.]", "", total_users_millions)),
indie_label_revenue = as.numeric(gsub("[^0-9\\.]", "", artist_on_indie_label_receives_per_play_2016)),
market_share = as.numeric(gsub("[^0-9\\.]", "", market_share))
) %>%
filter(
!is.na(streaming_service) &
!is.na(price_per_stream) &
!is.na(total_users) &
!is.na(market_share)
)
# Check cleaned data
head(df_clean)
# Create an interactive bar chart using ggplot and plotly
p1 <- ggplot(df_clean, aes(x = reorder(streaming_service, price_per_stream), y = price_per_stream, fill = streaming_service)) +
geom_bar(stat = "identity") +
coord_flip() +
scale_fill_brewer(palette = "Set3") +
labs(
title = "Interactive: Average Price Paid per Stream by Streaming Service",
x = "Streaming Service",
y = "Price Paid per Stream ($)"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 18, face = "bold"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
legend.position = "none"
)
# Convert ggplot to an interactive plotly plot
p1_interactive <- ggplotly(p1)
p1_interactive
# Install the treemapify library if not installed
if (!requireNamespace("treemapify", quietly = TRUE)) {
install.packages("treemapify")
}
# Load the treemapify library
library(treemapify)
# Create a treemap
p2 <- ggplot(df_clean, aes(area = market_share, fill = streaming_service, label = streaming_service)) +
geom_treemap() +
geom_treemap_text(colour = "white", place = "centre", grow = TRUE) +
scale_fill_brewer(palette = "Paired") +
labs(
title = "Market Share of Streaming Services (Treemap Visualization)"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 18, face = "bold")
)
# Convert to interactive plot
p2_interactive <- ggplotly(p2)
p2_interactive
# Install the treemapify library if not installed
if (!requireNamespace("treemapify", quietly = TRUE)) {
install.packages("treemapify")
}
# Load the treemapify library
library(treemapify)
# Create a treemap
p2 <- ggplot(df_clean, aes(area = market_share, fill = streaming_service, label = streaming_service)) +
geom_treemap() +
geom_treemap_text(colour = "white", place = "centre", grow = TRUE) +
scale_fill_brewer(palette = "Paired") +
labs(
title = "Market Share of Streaming Services (Treemap Visualization)"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 18, face = "bold")
)
# Convert to interactive plot
p2_interactive <- ggplotly(p2)
p2_interactive
# Create a bubble chart
p3 <- ggplot(df_clean, aes(x = total_users, y = indie_label_revenue, size = market_share, fill = streaming_service, label = streaming_service)) +
geom_point(alpha = 0.7, shape = 21, color = "black") +
scale_size_continuous(range = c(3, 15)) +
scale_fill_brewer(palette = "Dark2") +
labs(
title = "Interactive Bubble Chart: Total Users vs. Indie Label Revenue",
x = "Total Users (Millions)",
y = "Indie Label Revenue ($ per play)"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 18, face = "bold"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14)
)
# Convert to interactive plot
p3_interactive <- ggplotly(p3)
p3_interactive
# Example line plot (assumes a "year" column exists)
if ("year" %in% colnames(df_clean)) {
p4 <- ggplot(df_clean, aes(x = year, y = indie_label_revenue, group = streaming_service, color = streaming_service)) +
geom_line(size = 1) +
geom_point(size = 2) +
scale_color_brewer(palette = "Set1") +
labs(
title = "Trends in Indie Label Revenue Over Time by Streaming Service",
x = "Year",
y = "Indie Label Revenue ($ per play)"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 18, face = "bold"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14)
)
# Convert to interactive plot
p4_interactive <- ggplotly(p4)
p4_interactive
}
install.packages("gganimate")
# Load gganimate for animation
library(gganimate)
# Animated plot for revenue growth (assume data contains a 'year' column)
if ("year" %in% colnames(df_clean)) {
p4 <- ggplot(df_clean, aes(x = year, y = indie_label_revenue, fill = streaming_service)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_viridis_d() +
labs(
title = "Indie Label Revenue by Streaming Service Over Time",
x = "Year",
y = "Indie Label Revenue ($ per play)"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 18, face = "bold"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14)
) +
transition_states(year, transition_length = 2, state_length = 1) +  # Animation transition by year
enter_fade() + exit_fade()
# Render the animation
animate(p4, nframes = 100, fps = 10)
}
# Define a custom color palette to accommodate all streaming services
custom_colors <- c(
"Youtube" = "#F8766D", "Spotify" = "#7CAE00", "Pandora Premium*" = "#00BFC4",
"Apple Music" = "#C77CFF", "Amazon" = "#F564E3", "Deezer" = "#619CFF",
"Google Play Music" = "#00BA38", "Napster" = "#B79F00", "Tidal" = "#FF61C3"
)
# Create a bar chart using custom colors
p3 <- ggplot(df_clean, aes(x = reorder(streaming_service, total_users), y = total_users, fill = streaming_service)) +
geom_bar(stat = "identity") +
coord_flip() +
scale_fill_manual(values = custom_colors) +  # Custom color palette
labs(
title = "Total Users by Streaming Service (in Millions)",
x = "Streaming Service",
y = "Total Users (Millions)"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 18, face = "bold"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
legend.position = "none"
)
# Convert to interactive plot
p3_interactive <- ggplotly(p3)
p3_interactive
# Improved Bubble Chart with Interactive Tooltips and Better Color
p3 <- ggplot(df_clean, aes(x = total_users, y = indie_label_revenue, size = market_share, color = streaming_service, label = streaming_service)) +
geom_point(alpha = 0.7, shape = 21, aes(fill = streaming_service)) +
scale_size_continuous(range = c(5, 15)) +
scale_color_viridis_d() +
scale_fill_viridis_d() +
geom_text_repel(aes(label = streaming_service), size = 3, color = "black", max.overlaps = 10) +
labs(
title = "Interactive Bubble Chart: Total Users vs. Indie Label Revenue",
x = "Total Users (Millions)",
y = "Indie Label Revenue ($ per play)",
size = "Market Share (%)",
color = "Streaming Service"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 18, face = "bold"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14)
)
# Convert to an interactive plotly plot
p3_interactive <- ggplotly(p3, tooltip = c("label", "x", "y", "size"))
p3_interactive
knitr::opts_chunk$set(echo = TRUE)
# Load necessary libraries
# Load necessary libraries
library(readr)       # For reading CSV files
library(dplyr)       # For data manipulation
library(janitor)     # For cleaning column names
library(ggplot2)     # For visualizations
library(ggrepel)     # For better text labels in plots
library(plotly)      # For interactive plots
library(ggiraph)     # For interactive ggplot elements
# Load the dataset (replace "path_to_your_file.csv" with the actual file path)
file_path <- "C:\\Users\\karti\\OneDrive\\Desktop\\Music Streaming Services.csv"
df <- read_csv(file_path, show_col_types = FALSE)
# Clean column names
df <- df %>% janitor::clean_names()
# Data cleaning
df_clean <- df %>%
mutate(
price_per_stream = as.numeric(gsub("[^0-9\\.]", "", average_price_paid_per_stream)),
total_users = as.numeric(gsub("[^0-9\\.]", "", total_users_millions)),
indie_label_revenue = as.numeric(gsub("[^0-9\\.]", "", artist_on_indie_label_receives_per_play_2016)),
market_share = as.numeric(gsub("[^0-9\\.]", "", market_share))
) %>%
filter(
!is.na(streaming_service) &
!is.na(price_per_stream) &
!is.na(total_users) &
!is.na(market_share)
)
# Check cleaned data
head(df_clean)
# Create an interactive bar chart using ggplot and plotly
p1 <- ggplot(df_clean, aes(x = reorder(streaming_service, price_per_stream), y = price_per_stream, fill = streaming_service)) +
geom_bar(stat = "identity") +
coord_flip() +
scale_fill_brewer(palette = "Set3") +
labs(
title = "Interactive: Average Price Paid per Stream by Streaming Service",
x = "Streaming Service",
y = "Price Paid per Stream ($)"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 18, face = "bold"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
legend.position = "none"
)
# Convert ggplot to an interactive plotly plot
p1_interactive <- ggplotly(p1)
p1_interactive
# Improved Bubble Chart with Interactive Tooltips and Better Color
p3 <- ggplot(df_clean, aes(x = total_users, y = indie_label_revenue, size = market_share, color = streaming_service, label = streaming_service)) +
geom_point(alpha = 0.7, shape = 21, aes(fill = streaming_service)) +
scale_size_continuous(range = c(5, 15)) +
scale_color_viridis_d() +
scale_fill_viridis_d() +
geom_text_repel(aes(label = streaming_service), size = 3, color = "black", max.overlaps = 10) +
labs(
title = "Interactive Bubble Chart: Total Users vs. Indie Label Revenue",
x = "Total Users (Millions)",
y = "Indie Label Revenue ($ per play)",
size = "Market Share (%)",
color = "Streaming Service"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 18, face = "bold"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14)
)
# Convert to an interactive plotly plot
p3_interactive <- ggplotly(p3, tooltip = c("label", "x", "y", "size"))
p3_interactive
# Interactive Bubble Chart using ggiraph
library(ggiraph)
p4 <- ggplot(df_clean, aes(x = total_users, y = indie_label_revenue, size = market_share, fill = streaming_service)) +
geom_point_interactive(aes(tooltip = paste("Service:", streaming_service,
"<br>Total Users:", total_users,
"<br>Indie Label Revenue:", indie_label_revenue,
"<br>Market Share:", market_share)),
alpha = 0.7, shape = 21) +
scale_size_continuous(range = c(5, 15)) +
scale_fill_viridis_d() +
labs(
title = "Interactive Bubble Chart: Total Users vs. Indie Label Revenue",
x = "Total Users (Millions)",
y = "Indie Label Revenue ($ per play)",
size = "Market Share (%)"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 18, face = "bold"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14)
)
# Render as an interactive plot
girafe(ggobj = p4)
# Further Improved Interactive Bubble Chart
library(ggplot2)
library(plotly)
library(ggrepel)
# Improved Bubble Chart with Interactive Tooltips and Better Color
p4 <- ggplot(df_clean, aes(x = total_users, y = indie_label_revenue, size = market_share, color = streaming_service, label = streaming_service)) +
geom_point(alpha = 0.7) +
scale_size_continuous(range = c(5, 15), guide = guide_legend(title = "Market Share (%)")) +
scale_color_viridis_d() +
geom_text_repel(aes(label = streaming_service), size = 3, color = "black", max.overlaps = 10) +
labs(
title = "Interactive Bubble Chart: Total Users vs. Indie Label Revenue",
x = "Total Users (Millions)",
y = "Indie Label Revenue ($ per play)",
size = "Market Share (%)",
color = "Streaming Service"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 18, face = "bold"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
legend.position = "right"
)
# Convert to an interactive plotly plot
p4_interactive <- ggplotly(p4, tooltip = c("label", "x", "y", "size"))
p4_interactive
